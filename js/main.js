// –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
class WebOS {
    constructor() {
        this.state = {
            booted: false,
            loggedIn: false,
            apps: {},
            windows: {},
            settings: {
                theme: 'auto',
                showSeconds: true,
                autostart: false,
                animations: true,
                sound: true
            },
            user: {
                name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                avatar: 'üë§'
            },
            recentApps: []
        };
        
        this.init();
    }

    async init() {
        console.log('üöÄ WebOS –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this.loadSettings();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        await this.initModules();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
        await bootSystem();
        
        console.log('‚úÖ WebOS –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
    }

    async initModules() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Ç–∏–ª–∏—Ç
        if (typeof Utils !== 'undefined') {
            Utils.init();
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–∫–æ–Ω
        if (typeof WindowManager !== 'undefined') {
            WindowManager.init();
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        await this.initApps();
    }

    async initApps() {
        const appInitializers = [
            'Calculator', 'Notepad', 'Browser', 'Explorer', 
            'Settings', 'Calendar', 'Paint', 'Terminal'
        ];

        for (const appName of appInitializers) {
            try {
                if (typeof window[appName] !== 'undefined') {
                    this.state.apps[appName.toLowerCase()] = window[appName];
                    console.log(`‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ${appName} –∑–∞–≥—Ä—É–∂–µ–Ω–æ`);
                }
            } catch (error) {
                console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ${appName}:`, error);
            }
        }
    }

    loadSettings() {
        const savedSettings = localStorage.getItem('webos-settings');
        const savedUser = localStorage.getItem('webos-user');
        const savedRecent = localStorage.getItem('webos-recent-apps');

        if (savedSettings) {
            this.state.settings = { ...this.state.settings, ...JSON.parse(savedSettings) };
        }
        
        if (savedUser) {
            this.state.user = { ...this.state.user, ...JSON.parse(savedUser) };
        }
        
        if (savedRecent) {
            this.state.recentApps = JSON.parse(savedRecent);
        }

        this.applySettings();
    }

    saveSettings() {
        localStorage.setItem('webos-settings', JSON.stringify(this.state.settings));
        localStorage.setItem('webos-user', JSON.stringify(this.state.user));
        localStorage.setItem('webos-recent-apps', JSON.stringify(this.state.recentApps));
    }

    applySettings() {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
        this.applyTheme();
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this.updateTime();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.updateUI();
    }

    applyTheme() {
        const { theme } = this.state.settings;
        const html = document.documentElement;
        
        html.classList.remove('light-theme', 'dark-theme', 'auto-theme');
        
        if (theme === 'auto') {
            html.classList.add('auto-theme');
            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
                html.classList.add('dark-theme');
            } else {
                html.classList.add('light-theme');
            }
        } else {
            html.classList.add(`${theme}-theme`);
        }
    }

    updateTime() {
        const now = new Date();
        const timeOptions = { hour: '2-digit', minute: '2-digit' };
        
        if (this.state.settings.showSeconds) {
            timeOptions.second = '2-digit';
        }
        
        const timeString = now.toLocaleTimeString('ru-RU', timeOptions);
        const dateString = now.toLocaleDateString('ru-RU', {
            weekday: 'short',
            day: 'numeric',
            month: 'long',
            year: 'numeric'
        });
        
        const timeElement = document.getElementById('time');
        const dateElement = document.getElementById('date');
        
        if (timeElement) timeElement.textContent = timeString;
        if (dateElement) dateElement.textContent = dateString;
    }

    updateUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userNameElement = document.getElementById('user-name');
        if (userNameElement) {
            userNameElement.textContent = this.state.user.name;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä
        const userAvatarElement = document.querySelector('.user-avatar');
        if (userAvatarElement) {
            userAvatarElement.textContent = this.state.user.avatar;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.updateRecentApps();
    }

    updateRecentApps() {
        const recentAppsElement = document.getElementById('recent-apps');
        if (!recentAppsElement) return;

        recentAppsElement.innerHTML = '';
        
        this.state.recentApps.slice(0, 5).forEach(app => {
            const appElement = document.createElement('button');
            appElement.className = 'app-list-item';
            appElement.innerHTML = `
                <span>${app.icon}</span>
                <span>${app.name}</span>
            `;
            appElement.addEventListener('click', () => {
                this.openApp(app.id);
            });
            recentAppsElement.appendChild(appElement);
        });
    }

    addToRecentApps(app) {
        const existingIndex = this.state.recentApps.findIndex(a => a.id === app.id);
        
        if (existingIndex !== -1) {
            this.state.recentApps.splice(existingIndex, 1);
        }
        
        this.state.recentApps.unshift(app);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        if (this.state.recentApps.length > 10) {
            this.state.recentApps = this.state.recentApps.slice(0, 10);
        }
        
        this.saveSettings();
        this.updateRecentApps();
    }

    openApp(appId, options = {}) {
        console.log(`üì± –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ${appId}`);
        
        const appConfig = APP_CONFIG[appId];
        if (!appConfig) {
            this.showNotification('–û—à–∏–±–∫–∞', `–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "${appId}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`, 'error');
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–¥–∞–≤–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.addToRecentApps({
            id: appId,
            name: appConfig.name,
            icon: appConfig.icon
        });
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –æ–∫–æ–Ω
        if (WindowManager) {
            WindowManager.openWindow(appId, options);
        } else {
            console.error('–ú–µ–Ω–µ–¥–∂–µ—Ä –æ–∫–æ–Ω –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
    }

    showNotification(title, message, type = 'info', duration = 5000) {
        if (typeof Utils !== 'undefined') {
            Utils.showNotification(title, message, type, duration);
        } else {
            console.log(`üì¢ ${title}: ${message}`);
        }
    }

    shutdown() {
        this.showNotification('–°–∏—Å—Ç–µ–º–∞', '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...', 'info');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.saveSettings();
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if (WindowManager) {
            WindowManager.closeAllWindows();
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—ã–∫–ª—é—á–µ–Ω–∏—è
        setTimeout(() => {
            document.body.innerHTML = `
                <div style="
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: #000;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    color: white;
                    font-size: 24px;
                    z-index: 10000;
                ">
                    <div style="text-align: center;">
                        <div style="font-size: 48px; margin-bottom: 20px;">‚ö°</div>
                        <div>–°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É</div>
                    </div>
                </div>
            `;
        }, 1000);
    }

    restart() {
        this.showNotification('–°–∏—Å—Ç–µ–º–∞', '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...', 'info');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.saveSettings();
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if (WindowManager) {
            WindowManager.closeAllWindows();
        }
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        setTimeout(() => {
            window.location.reload();
        }, 1000);
    }

    logout() {
        this.showNotification('–°–∏—Å—Ç–µ–º–∞', '–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...', 'info');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.saveSettings();
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if (WindowManager) {
            WindowManager.closeAllWindows();
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
        setTimeout(() => {
            document.getElementById('desktop').style.display = 'none';
            document.getElementById('login-screen').style.display = 'flex';
            this.state.loggedIn = false;
        }, 1000);
    }
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
const APP_CONFIG = {
    notepad: {
        name: '–ë–ª–æ–∫–Ω–æ—Ç',
        icon: 'üìù',
        component: 'Notepad'
    },
    calculator: {
        name: '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä',
        icon: 'üßÆ',
        component: 'Calculator'
    },
    browser: {
        name: '–ë—Ä–∞—É–∑–µ—Ä',
        icon: 'üåê',
        component: 'Browser'
    },
    explorer: {
        name: '–ü—Ä–æ–≤–æ–¥–Ω–∏–∫',
        icon: 'üìÅ',
        component: 'Explorer'
    },
    settings: {
        name: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
        icon: '‚öôÔ∏è',
        component: 'Settings'
    },
    calendar: {
        name: '–ö–∞–ª–µ–Ω–¥–∞—Ä—å',
        icon: 'üìÖ',
        component: 'Calendar'
    },
    paint: {
        name: '–†–∏—Å–æ–≤–∞–Ω–∏–µ',
        icon: 'üé®',
        component: 'Paint'
    },
    terminal: {
        name: '–¢–µ—Ä–º–∏–Ω–∞–ª',
        icon: 'üíª',
        component: 'Terminal'
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã
let webOS;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    webOS = new WebOS();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.WebOS = webOS;
window.APP_CONFIG = APP_CONFIG;
