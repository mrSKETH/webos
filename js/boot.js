// –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã
class BootManager {
    static async boot() {
        console.log('üîå –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã...');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
        this.showBootAnimation();
        
        try {
            // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            await this.simulateBootProcess();
            
            // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            await this.finishBoot();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∏—Å—Ç–µ–º—ã:', error);
            this.showBootError(error);
        }
    }

    static showBootAnimation() {
        const bootScreen = document.getElementById('boot-animation');
        if (bootScreen) {
            bootScreen.style.display = 'flex';
        }
    }

    static async simulateBootProcess() {
        const steps = [
            { name: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–¥—Ä–∞', duration: 800 },
            { name: '–ó–∞–≥—Ä—É–∑–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–æ–≤', duration: 600 },
            { name: '–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–ª—É–∂–±', duration: 1000 },
            { name: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞–±–æ—á–µ–π —Å—Ä–µ–¥—ã', duration: 700 },
            { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π', duration: 500 }
        ];

        const progressBar = document.getElementById('boot-progress');
        const progressText = document.querySelector('#boot-animation p');

        for (let i = 0; i < steps.length; i++) {
            const step = steps[i];
            const progress = ((i + 1) / steps.length) * 100;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            if (progressText) {
                progressText.textContent = step.name + '...';
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if (progressBar) {
                progressBar.style.width = `${progress}%`;
            }
            
            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —à–∞–≥–∞
            await this.delay(step.duration);
        }
    }

    static async finishBoot() {
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const progressBar = document.getElementById('boot-progress');
        if (progressBar) {
            progressBar.style.width = '100%';
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const progressText = document.querySelector('#boot-animation p');
        if (progressText) {
            progressText.textContent = '–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!';
        }

        // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await this.delay(1000);

        // –°–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        const bootScreen = document.getElementById('boot-animation');
        if (bootScreen) {
            bootScreen.style.opacity = '0';
            bootScreen.style.transition = 'opacity 0.5s ease';
            
            setTimeout(() => {
                bootScreen.style.display = 'none';
                this.showLoginScreen();
            }, 500);
        }
    }

    static showBootError(error) {
        const bootScreen = document.getElementById('boot-animation');
        if (bootScreen) {
            bootScreen.innerHTML = `
                <div style="text-align: center; color: white;">
                    <div style="font-size: 48px; margin-bottom: 20px;">‚ùå</div>
                    <h2 style="margin-bottom: 10px;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
                    <p style="margin-bottom: 20px; opacity: 0.8;">${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}</p>
                    <button onclick="location.reload()" style="
                        padding: 10px 20px;
                        background: white;
                        border: none;
                        border-radius: 6px;
                        cursor: pointer;
                        font-size: 14px;
                    ">–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å</button>
                </div>
            `;
        }
    }

    static showLoginScreen() {
        const loginScreen = document.getElementById('login-screen');
        const loginContainer = document.querySelector('.login-container');
        
        if (loginScreen && loginContainer) {
            loginScreen.style.display = 'flex';
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
            setTimeout(() => {
                loginContainer.classList.add('loaded');
            }, 100);
        }
    }

    static delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
async function bootSystem() {
    await BootManager.boot();
}

function showLoginScreen() {
    BootManager.showLoginScreen();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.BootManager = BootManager;
window.bootSystem = bootSystem;
window.showLoginScreen = showLoginScreen;
