// –°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
class AuthManager {
    static init() {
        console.log('üîê –°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        this.setupEventListeners();
    }

    static setupEventListeners() {
        const loginForm = document.getElementById('login-form');
        if (loginForm) {
            loginForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleLogin();
            });
        }

        // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ
        this.setupDemoCredentials();
    }

    static setupDemoCredentials() {
        const usernameInput = document.getElementById('username');
        const passwordInput = document.getElementById('password');
        
        if (usernameInput && passwordInput) {
            // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
            usernameInput.value = 'user';
            passwordInput.value = '123';
        }
    }

    static async handleLogin() {
        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;
        const loginBtn = document.querySelector('.login-btn');

        if (!username || !password) {
            this.showLoginError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        this.showLoading(loginBtn);

        try {
            // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const result = await this.authenticate(username, password);
            
            if (result.success) {
                // –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
                await this.handleSuccessfulLogin(result.user);
            } else {
                throw new Error('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
            }
            
        } catch (error) {
            this.showLoginError(error.message);
        } finally {
            this.hideLoading(loginBtn);
        }
    }

    static async authenticate(username, password) {
        // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
        await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 1000));

        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–º–æ-—É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const validUsers = {
            'user': '123',
            'admin': 'admin123',
            'demo': 'demo'
        };

        if (validUsers[username] && validUsers[username] === password) {
            return {
                success: true,
                user: {
                    name: username === 'admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : 
                          username === 'demo' ? '–î–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    username: username,
                    avatar: 'üë§',
                    role: username === 'admin' ? 'admin' : 'user'
                }
            };
        } else {
            throw new Error('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
        }
    }

    static async handleSuccessfulLogin(userData) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if (window.webOS) {
            webOS.state.user = userData;
            webOS.state.loggedIn = true;
            webOS.saveSettings();
        }

        // –ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
        await this.showSuccessAnimation();

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª
        this.showDesktop();
    }

    static async showSuccessAnimation() {
        const loginContainer = document.querySelector('.login-container');
        if (loginContainer) {
            loginContainer.style.transform = 'translateY(-20px)';
            loginContainer.style.opacity = '0';
            
            await new Promise(resolve => setTimeout(resolve, 500));
        }
    }

    static showDesktop() {
        const loginScreen = document.getElementById('login-screen');
        const desktop = document.getElementById('desktop');
        
        if (loginScreen) loginScreen.style.display = 'none';
        if (desktop) {
            desktop.style.display = 'block';
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            if (window.webOS) {
                webOS.updateTime();
                setInterval(() => webOS.updateTime(), 1000);
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (window.Utils && window.webOS) {
                Utils.showNotification(
                    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', 
                    `–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ WebOS, ${webOS.state.user.name}!`,
                    'success'
                );
            }
        }
    }

    static showLoading(button) {
        if (button) {
            button.classList.add('loading');
            button.disabled = true;
        }
    }

    static hideLoading(button) {
        if (button) {
            button.classList.remove('loading');
            button.disabled = false;
        }
    }

    static showLoginError(message) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (window.Utils) {
            Utils.showNotification('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞', message, 'error');
        } else {
            alert('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ' + message);
        }
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –æ—à–∏–±–∫–∏
        const loginForm = document.getElementById('login-form');
        if (loginForm) {
            loginForm.classList.add('error-shake');
            setTimeout(() => {
                loginForm.classList.remove('error-shake');
            }, 500);
        }
    }

    static logout() {
        if (window.webOS) {
            webOS.logout();
        }
    }

    static getCurrentUser() {
        return window.webOS ? webOS.state.user : null;
    }

    static isLoggedIn() {
        return window.webOS ? webOS.state.loggedIn : false;
    }

    static hasPermission(permission) {
        const user = this.getCurrentUser();
        if (!user) return false;
        
        if (user.role === 'admin') return true;
        
        const permissions = {
            'user': ['open_apps', 'change_settings'],
            'demo': ['open_apps']
        };
        
        return permissions[user.role]?.includes(permission) || false;
    }
}

// CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏
const errorStyles = `
    .error-shake {
        animation: shake 0.5s ease-in-out;
    }
    
    @keyframes shake {
        0%, 100% { transform: translateX(0); }
        25% { transform: translateX(-10px); }
        75% { transform: translateX(10px); }
    }
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç
const styleSheet = document.createElement('style');
styleSheet.textContent = errorStyles;
document.head.appendChild(styleSheet);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    AuthManager.init();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.AuthManager = AuthManager;
